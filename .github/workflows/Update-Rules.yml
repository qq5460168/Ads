name: Update Rules

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 */6 * * *'  # 每6小时执行一次
  push:
    paths:
      - '.github/workflows/Update-Rules.yml'
      - 'data/**'  # 监控配置相关文件变动

jobs:
  update-rules:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 防止任务无限挂起
    defaults:
      run:
        shell: bash  # 统一使用bash shell

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史，确保提交正常

      - name: Set up environment
        run: |
          echo "===== 环境初始化 ====="
          # 创建临时目录（确保权限）
          mkdir -p ./tmp
          chmod 777 ./tmp
          # 显示系统信息用于调试
          echo "系统信息: $(uname -a)"
          echo "当前目录: $(pwd)"
          echo "目录结构: $(ls -la)"

      - name: Update Rules
        id: update_rules
        run: |
          echo "===== 开始更新规则 ====="
          # 赋予脚本执行权限
          chmod +x ./data/script/*.sh 2>/dev/null || { echo "警告：脚本权限设置失败"; exit 0; }
          
          # 执行主更新脚本
          if [ -f "./data/script/update-rules.sh" ]; then
            echo "执行更新脚本..."
            bash -x ./data/script/update-rules.sh  # 输出详细执行日志
            echo "脚本执行完成，退出码: $?"
          else
            echo "错误：未找到 ./data/script/update-rules.sh"
            exit 1
          fi
          
          # 执行Python补充处理
          if [ -f "./data/script/update_rules.py" ]; then
            echo "执行Python处理脚本..."
            python3 -u ./data/script/update_rules.py  # 无缓冲输出
          else
            echo "警告：未找到Python处理脚本，跳过"
          fi

      - name: Update ReadMe
        run: |
          echo "===== 更新说明文档 ====="
          if [ -f "./data/script/clean-readme.sh" ]; then
            bash ./data/script/clean-readme.sh
          else
            echo "警告：未找到README清理脚本，跳过"
          fi

      - name: Commit and push changes
        run: |
          echo "===== 处理代码提交 ====="
          # 配置Git身份
          git config --global user.name "AutoUpdater[Bot]"
          git config --global user.email "916899380+autoupdater[bot]@users.noreply.github.com"
          
          # 检查变更
          git add --all
          if git diff-index --quiet HEAD --; then
            echo "无变更需要提交"
            exit 0
          fi
          
          # 提交并推送
          git commit -m "自动更新: $(TZ=UTC-8 date +'%Y-%m-%d %H:%M:%S')（北京时间）"
          git push origin HEAD:${{ github.ref }} || {
            echo "推送失败，尝试拉取最新代码后重试..."
            git pull --rebase origin ${{ github.ref }}
            git push origin HEAD:${{ github.ref }}
          }

      - name: Cleanup temporary files
        if: always()  # 无论前序步骤成败都执行清理
        run: |
          echo "===== 清理临时资源 ====="
          # 强制删除临时目录
          if [ -d "./tmp" ]; then
            echo "删除临时目录: ./tmp"
            rm -rf ./tmp
          fi
          # 清理可能的残留文件
          rm -f tmp-rules.txt tmp-allow.txt 2>/dev/null
          echo "清理完成"

      - name: Cleanup old workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 1  # 保留1天内的运行记录
          keep_minimum_runs: 5  # 至少保留5条记录